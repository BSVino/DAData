// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace da {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* GameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KillFlags_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  GameData_descriptor_ = file->message_type(0);
  static const int GameData_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, cheats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, teamplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, thirdperson_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, thirdperson_inactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, disconnections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, unique_players_this_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, da_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, characters_chosen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, weapons_chosen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, skills_chosen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, weapons_chosen_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, skills_chosen_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, map_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, vr_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, vr_inactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, platform_windows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, platform_linux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, platform_osx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, kill_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, player_list_),
  };
  GameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameData_descriptor_,
      GameData::default_instance_,
      GameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameData));
  PlayerPositions_descriptor_ = file->message_type(1);
  static const int PlayerPositions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositions, position_),
  };
  PlayerPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPositions_descriptor_,
      PlayerPositions::default_instance_,
      PlayerPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPositions));
  VoteResult_descriptor_ = file->message_type(2);
  static const int VoteResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResult, issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResult, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResult, result_),
  };
  VoteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteResult_descriptor_,
      VoteResult::default_instance_,
      VoteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteResult));
  PlayerInfo_descriptor_ = file->message_type(3);
  static const int PlayerInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, total_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, waypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, objective_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, slowmo_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, slowmo_seconds_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  KillInfo_descriptor_ = file->message_type(4);
  static const int KillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillInfo, victim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillInfo, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillInfo, grenade_position_),
  };
  KillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillInfo_descriptor_,
      KillInfo::default_instance_,
      KillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillInfo));
  PlayerList_descriptor_ = file->message_type(5);
  static const int PlayerList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, style_),
  };
  PlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerList_descriptor_,
      PlayerList::default_instance_,
      PlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerList));
  ServerReply_descriptor_ = file->message_type(6);
  static const int ServerReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, daily_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, daily_leader_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, weekly_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, weekly_leader_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, monthly_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, monthly_leader_style_),
  };
  ServerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerReply_descriptor_,
      ServerReply::default_instance_,
      ServerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerReply));
  KillFlags_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameData_descriptor_, &GameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPositions_descriptor_, &PlayerPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteResult_descriptor_, &VoteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillInfo_descriptor_, &KillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerList_descriptor_, &PlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerReply_descriptor_, &ServerReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete GameData::default_instance_;
  delete GameData_reflection_;
  delete PlayerPositions::default_instance_;
  delete PlayerPositions_reflection_;
  delete VoteResult::default_instance_;
  delete VoteResult_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete KillInfo::default_instance_;
  delete KillInfo_reflection_;
  delete PlayerList::default_instance_;
  delete PlayerList_reflection_;
  delete ServerReply::default_instance_;
  delete ServerReply_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::da::protobuf::protobuf_AddDesc_math_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\013da.protobuf\032\nmath.proto\"\237\006"
    "\n\010GameData\022\r\n\005debug\030\001 \001(\010\022\020\n\010map_name\030\002 "
    "\001(\t\022\023\n\013server_name\030\003 \001(\t\022\021\n\ttimestamp\030\004 "
    "\001(\005\022/\n\tpositions\030\005 \001(\0132\034.da.protobuf.Pla"
    "yerPositions\022\016\n\006cheats\030\006 \001(\010\022+\n\005kills\030\007 "
    "\001(\0132\034.da.protobuf.PlayerPositions\022,\n\006dea"
    "ths\030\010 \001(\0132\034.da.protobuf.PlayerPositions\022"
    "\023\n\013connections\030\t \001(\005\022\020\n\010teamplay\030\n \001(\010\022\032"
    "\n\022thirdperson_active\030\013 \001(\005\022\034\n\024thirdperso"
    "n_inactive\030\014 \001(\005\022\026\n\016disconnections\030\r \001(\005"
    "\022\037\n\027unique_players_this_map\030\016 \001(\005\022\022\n\nda_"
    "version\030\017 \001(\005\022\031\n\021characters_chosen\030\020 \003(\t"
    "\022\026\n\016weapons_chosen\030\021 \003(\005\022\025\n\rskills_chose"
    "n\030\022 \003(\005\022&\n\005votes\030\023 \003(\0132\027.da.protobuf.Vot"
    "eResult\022\030\n\020weapons_chosen_s\030\024 \003(\t\022\027\n\017ski"
    "lls_chosen_s\030\025 \003(\t\022\020\n\010map_time\030\026 \001(\002\022\021\n\t"
    "vr_active\030\027 \001(\005\022\023\n\013vr_inactive\030\030 \001(\005\022\030\n\020"
    "platform_windows\030\031 \001(\005\022\026\n\016platform_linux"
    "\030\032 \001(\005\022\024\n\014platform_osx\030\033 \001(\005\022+\n\014kill_det"
    "ails\030\034 \003(\0132\025.da.protobuf.KillInfo\022,\n\013pla"
    "yer_list\030\035 \003(\0132\027.da.protobuf.PlayerList\""
    "8\n\017PlayerPositions\022%\n\010position\030\001 \003(\0132\023.d"
    "a.protobuf.Vector\"<\n\nVoteResult\022\r\n\005issue"
    "\030\001 \001(\t\022\017\n\007details\030\002 \001(\t\022\016\n\006result\030\003 \001(\010\""
    "\267\002\n\nPlayerInfo\022%\n\010position\030\001 \001(\0132\023.da.pr"
    "otobuf.Vector\022\016\n\006health\030\002 \001(\005\022\r\n\005flags\030\003"
    " \001(\004\022\016\n\006weapon\030\004 \001(\t\022\r\n\005skill\030\005 \001(\t\022\021\n\ta"
    "ccountid\030\006 \001(\r\022\r\n\005style\030\007 \001(\002\022\023\n\013total_s"
    "tyle\030\010 \001(\002\022\r\n\005kills\030\t \001(\r\022\016\n\006deaths\030\n \001("
    "\r\022\020\n\010waypoint\030\013 \001(\r\022/\n\022objective_positio"
    "n\030\014 \001(\0132\023.da.protobuf.Vector\022\023\n\013slowmo_t"
    "ype\030\r \001(\t\022\026\n\016slowmo_seconds\030\016 \001(\002\"\213\001\n\010Ki"
    "llInfo\022\'\n\006victim\030\001 \001(\0132\027.da.protobuf.Pla"
    "yerInfo\022\'\n\006killer\030\002 \001(\0132\027.da.protobuf.Pl"
    "ayerInfo\022-\n\020grenade_position\030\003 \001(\0132\023.da."
    "protobuf.Vector\"<\n\nPlayerList\022\021\n\taccount"
    "id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005style\030\003 \001(\002\"\251\001"
    "\n\013ServerReply\022\024\n\014daily_leader\030\001 \001(\t\022\032\n\022d"
    "aily_leader_style\030\002 \001(\002\022\025\n\rweekly_leader"
    "\030\003 \001(\t\022\033\n\023weekly_leader_style\030\004 \001(\002\022\026\n\016m"
    "onthly_leader\030\005 \001(\t\022\034\n\024monthly_leader_st"
    "yle\030\006 \001(\002*\276\002\n\tKillFlags\022\024\n\020KILL_THIRDPER"
    "SON\020\000\022\016\n\nKILL_AIMIN\020\001\022\017\n\013KILL_DIVING\020\002\022\020"
    "\n\014KILL_ROLLING\020\003\022\020\n\014KILL_SLIDING\020\004\022\021\n\rKI"
    "LL_FLIPPING\020\005\022\025\n\021KILL_SUPERFALLING\020\006\022\023\n\017"
    "KILL_BY_GRENADE\020\007\022\021\n\rKILL_BY_BRAWL\020\010\022\025\n\021"
    "KILL_SKILL_ACTIVE\020\t\022\033\n\027KILL_SUPER_SKILL_"
    "ACTIVE\020\n\022\022\n\016KILL_IS_TARGET\020\013\022\026\n\022KILL_HAS"
    "_BRIEFCASE\020\014\022\017\n\013KILL_IS_BOT\020\r\022\023\n\017KILL_IS"
    "_SUICIDE\020\016", 1970);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  GameData::default_instance_ = new GameData();
  PlayerPositions::default_instance_ = new PlayerPositions();
  VoteResult::default_instance_ = new VoteResult();
  PlayerInfo::default_instance_ = new PlayerInfo();
  KillInfo::default_instance_ = new KillInfo();
  PlayerList::default_instance_ = new PlayerList();
  ServerReply::default_instance_ = new ServerReply();
  GameData::default_instance_->InitAsDefaultInstance();
  PlayerPositions::default_instance_->InitAsDefaultInstance();
  VoteResult::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  KillInfo::default_instance_->InitAsDefaultInstance();
  PlayerList::default_instance_->InitAsDefaultInstance();
  ServerReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;
const ::google::protobuf::EnumDescriptor* KillFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillFlags_descriptor_;
}
bool KillFlags_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameData::kDebugFieldNumber;
const int GameData::kMapNameFieldNumber;
const int GameData::kServerNameFieldNumber;
const int GameData::kTimestampFieldNumber;
const int GameData::kPositionsFieldNumber;
const int GameData::kCheatsFieldNumber;
const int GameData::kKillsFieldNumber;
const int GameData::kDeathsFieldNumber;
const int GameData::kConnectionsFieldNumber;
const int GameData::kTeamplayFieldNumber;
const int GameData::kThirdpersonActiveFieldNumber;
const int GameData::kThirdpersonInactiveFieldNumber;
const int GameData::kDisconnectionsFieldNumber;
const int GameData::kUniquePlayersThisMapFieldNumber;
const int GameData::kDaVersionFieldNumber;
const int GameData::kCharactersChosenFieldNumber;
const int GameData::kWeaponsChosenFieldNumber;
const int GameData::kSkillsChosenFieldNumber;
const int GameData::kVotesFieldNumber;
const int GameData::kWeaponsChosenSFieldNumber;
const int GameData::kSkillsChosenSFieldNumber;
const int GameData::kMapTimeFieldNumber;
const int GameData::kVrActiveFieldNumber;
const int GameData::kVrInactiveFieldNumber;
const int GameData::kPlatformWindowsFieldNumber;
const int GameData::kPlatformLinuxFieldNumber;
const int GameData::kPlatformOsxFieldNumber;
const int GameData::kKillDetailsFieldNumber;
const int GameData::kPlayerListFieldNumber;
#endif  // !_MSC_VER

GameData::GameData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameData::InitAsDefaultInstance() {
  positions_ = const_cast< ::da::protobuf::PlayerPositions*>(&::da::protobuf::PlayerPositions::default_instance());
  kills_ = const_cast< ::da::protobuf::PlayerPositions*>(&::da::protobuf::PlayerPositions::default_instance());
  deaths_ = const_cast< ::da::protobuf::PlayerPositions*>(&::da::protobuf::PlayerPositions::default_instance());
}

GameData::GameData(const GameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameData::SharedCtor() {
  _cached_size_ = 0;
  debug_ = false;
  map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  positions_ = NULL;
  cheats_ = false;
  kills_ = NULL;
  deaths_ = NULL;
  connections_ = 0;
  teamplay_ = false;
  thirdperson_active_ = 0;
  thirdperson_inactive_ = 0;
  disconnections_ = 0;
  unique_players_this_map_ = 0;
  da_version_ = 0;
  map_time_ = 0;
  vr_active_ = 0;
  vr_inactive_ = 0;
  platform_windows_ = 0;
  platform_linux_ = 0;
  platform_osx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameData::~GameData() {
  SharedDtor();
}

void GameData::SharedDtor() {
  if (map_name_ != &::google::protobuf::internal::kEmptyString) {
    delete map_name_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
    delete positions_;
    delete kills_;
    delete deaths_;
  }
}

void GameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameData_descriptor_;
}

const GameData& GameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

GameData* GameData::default_instance_ = NULL;

GameData* GameData::New() const {
  return new GameData;
}

void GameData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    debug_ = false;
    if (has_map_name()) {
      if (map_name_ != &::google::protobuf::internal::kEmptyString) {
        map_name_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    timestamp_ = 0;
    if (has_positions()) {
      if (positions_ != NULL) positions_->::da::protobuf::PlayerPositions::Clear();
    }
    cheats_ = false;
    if (has_kills()) {
      if (kills_ != NULL) kills_->::da::protobuf::PlayerPositions::Clear();
    }
    if (has_deaths()) {
      if (deaths_ != NULL) deaths_->::da::protobuf::PlayerPositions::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    connections_ = 0;
    teamplay_ = false;
    thirdperson_active_ = 0;
    thirdperson_inactive_ = 0;
    disconnections_ = 0;
    unique_players_this_map_ = 0;
    da_version_ = 0;
  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    map_time_ = 0;
    vr_active_ = 0;
    vr_inactive_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    platform_windows_ = 0;
    platform_linux_ = 0;
    platform_osx_ = 0;
  }
  characters_chosen_.Clear();
  weapons_chosen_.Clear();
  skills_chosen_.Clear();
  votes_.Clear();
  weapons_chosen_s_.Clear();
  skills_chosen_s_.Clear();
  kill_details_.Clear();
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool debug = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map_name;
        break;
      }

      // optional string map_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_name;
        break;
      }

      // optional string server_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_positions;
        break;
      }

      // optional .da.protobuf.PlayerPositions positions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cheats;
        break;
      }

      // optional bool cheats = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cheats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cheats_)));
          set_has_cheats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kills;
        break;
      }

      // optional .da.protobuf.PlayerPositions kills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deaths;
        break;
      }

      // optional .da.protobuf.PlayerPositions deaths = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deaths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deaths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_connections;
        break;
      }

      // optional int32 connections = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connections_)));
          set_has_connections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_teamplay;
        break;
      }

      // optional bool teamplay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teamplay_)));
          set_has_teamplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_thirdperson_active;
        break;
      }

      // optional int32 thirdperson_active = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thirdperson_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thirdperson_active_)));
          set_has_thirdperson_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_thirdperson_inactive;
        break;
      }

      // optional int32 thirdperson_inactive = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thirdperson_inactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thirdperson_inactive_)));
          set_has_thirdperson_inactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_disconnections;
        break;
      }

      // optional int32 disconnections = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disconnections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disconnections_)));
          set_has_disconnections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_unique_players_this_map;
        break;
      }

      // optional int32 unique_players_this_map = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_players_this_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_players_this_map_)));
          set_has_unique_players_this_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_da_version;
        break;
      }

      // optional int32 da_version = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_da_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &da_version_)));
          set_has_da_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_characters_chosen;
        break;
      }

      // repeated string characters_chosen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characters_chosen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_characters_chosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->characters_chosen(this->characters_chosen_size() - 1).data(),
            this->characters_chosen(this->characters_chosen_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_characters_chosen;
        if (input->ExpectTag(136)) goto parse_weapons_chosen;
        break;
      }

      // repeated int32 weapons_chosen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapons_chosen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_weapons_chosen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weapons_chosen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_weapons_chosen;
        if (input->ExpectTag(144)) goto parse_skills_chosen;
        break;
      }

      // repeated int32 skills_chosen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills_chosen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_skills_chosen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skills_chosen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skills_chosen;
        if (input->ExpectTag(154)) goto parse_votes;
        break;
      }

      // repeated .da.protobuf.VoteResult votes = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_votes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_votes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_votes;
        if (input->ExpectTag(162)) goto parse_weapons_chosen_s;
        break;
      }

      // repeated string weapons_chosen_s = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapons_chosen_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_weapons_chosen_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weapons_chosen_s(this->weapons_chosen_s_size() - 1).data(),
            this->weapons_chosen_s(this->weapons_chosen_s_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_weapons_chosen_s;
        if (input->ExpectTag(170)) goto parse_skills_chosen_s;
        break;
      }

      // repeated string skills_chosen_s = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills_chosen_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_skills_chosen_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skills_chosen_s(this->skills_chosen_s_size() - 1).data(),
            this->skills_chosen_s(this->skills_chosen_s_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_skills_chosen_s;
        if (input->ExpectTag(181)) goto parse_map_time;
        break;
      }

      // optional float map_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_map_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_time_)));
          set_has_map_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_vr_active;
        break;
      }

      // optional int32 vr_active = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vr_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vr_active_)));
          set_has_vr_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_vr_inactive;
        break;
      }

      // optional int32 vr_inactive = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vr_inactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vr_inactive_)));
          set_has_vr_inactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_platform_windows;
        break;
      }

      // optional int32 platform_windows = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_windows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_windows_)));
          set_has_platform_windows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_platform_linux;
        break;
      }

      // optional int32 platform_linux = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_linux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_linux_)));
          set_has_platform_linux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_platform_osx;
        break;
      }

      // optional int32 platform_osx = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_osx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_osx_)));
          set_has_platform_osx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_kill_details;
        break;
      }

      // repeated .da.protobuf.KillInfo kill_details = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_kill_details;
        if (input->ExpectTag(234)) goto parse_player_list;
        break;
      }

      // repeated .da.protobuf.PlayerList player_list = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool debug = 1;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->debug(), output);
  }

  // optional string map_name = 2;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->map_name(), output);
  }

  // optional string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_name(), output);
  }

  // optional int32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestamp(), output);
  }

  // optional .da.protobuf.PlayerPositions positions = 5;
  if (has_positions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->positions(), output);
  }

  // optional bool cheats = 6;
  if (has_cheats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cheats(), output);
  }

  // optional .da.protobuf.PlayerPositions kills = 7;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kills(), output);
  }

  // optional .da.protobuf.PlayerPositions deaths = 8;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->deaths(), output);
  }

  // optional int32 connections = 9;
  if (has_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->connections(), output);
  }

  // optional bool teamplay = 10;
  if (has_teamplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->teamplay(), output);
  }

  // optional int32 thirdperson_active = 11;
  if (has_thirdperson_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->thirdperson_active(), output);
  }

  // optional int32 thirdperson_inactive = 12;
  if (has_thirdperson_inactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->thirdperson_inactive(), output);
  }

  // optional int32 disconnections = 13;
  if (has_disconnections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->disconnections(), output);
  }

  // optional int32 unique_players_this_map = 14;
  if (has_unique_players_this_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->unique_players_this_map(), output);
  }

  // optional int32 da_version = 15;
  if (has_da_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->da_version(), output);
  }

  // repeated string characters_chosen = 16;
  for (int i = 0; i < this->characters_chosen_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->characters_chosen(i).data(), this->characters_chosen(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->characters_chosen(i), output);
  }

  // repeated int32 weapons_chosen = 17;
  for (int i = 0; i < this->weapons_chosen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->weapons_chosen(i), output);
  }

  // repeated int32 skills_chosen = 18;
  for (int i = 0; i < this->skills_chosen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->skills_chosen(i), output);
  }

  // repeated .da.protobuf.VoteResult votes = 19;
  for (int i = 0; i < this->votes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->votes(i), output);
  }

  // repeated string weapons_chosen_s = 20;
  for (int i = 0; i < this->weapons_chosen_s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->weapons_chosen_s(i).data(), this->weapons_chosen_s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->weapons_chosen_s(i), output);
  }

  // repeated string skills_chosen_s = 21;
  for (int i = 0; i < this->skills_chosen_s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->skills_chosen_s(i).data(), this->skills_chosen_s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->skills_chosen_s(i), output);
  }

  // optional float map_time = 22;
  if (has_map_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->map_time(), output);
  }

  // optional int32 vr_active = 23;
  if (has_vr_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->vr_active(), output);
  }

  // optional int32 vr_inactive = 24;
  if (has_vr_inactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->vr_inactive(), output);
  }

  // optional int32 platform_windows = 25;
  if (has_platform_windows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->platform_windows(), output);
  }

  // optional int32 platform_linux = 26;
  if (has_platform_linux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->platform_linux(), output);
  }

  // optional int32 platform_osx = 27;
  if (has_platform_osx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->platform_osx(), output);
  }

  // repeated .da.protobuf.KillInfo kill_details = 28;
  for (int i = 0; i < this->kill_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->kill_details(i), output);
  }

  // repeated .da.protobuf.PlayerList player_list = 29;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool debug = 1;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->debug(), target);
  }

  // optional string map_name = 2;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_name(), target);
  }

  // optional string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  // optional int32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestamp(), target);
  }

  // optional .da.protobuf.PlayerPositions positions = 5;
  if (has_positions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->positions(), target);
  }

  // optional bool cheats = 6;
  if (has_cheats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cheats(), target);
  }

  // optional .da.protobuf.PlayerPositions kills = 7;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kills(), target);
  }

  // optional .da.protobuf.PlayerPositions deaths = 8;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->deaths(), target);
  }

  // optional int32 connections = 9;
  if (has_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->connections(), target);
  }

  // optional bool teamplay = 10;
  if (has_teamplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->teamplay(), target);
  }

  // optional int32 thirdperson_active = 11;
  if (has_thirdperson_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->thirdperson_active(), target);
  }

  // optional int32 thirdperson_inactive = 12;
  if (has_thirdperson_inactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->thirdperson_inactive(), target);
  }

  // optional int32 disconnections = 13;
  if (has_disconnections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->disconnections(), target);
  }

  // optional int32 unique_players_this_map = 14;
  if (has_unique_players_this_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->unique_players_this_map(), target);
  }

  // optional int32 da_version = 15;
  if (has_da_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->da_version(), target);
  }

  // repeated string characters_chosen = 16;
  for (int i = 0; i < this->characters_chosen_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->characters_chosen(i).data(), this->characters_chosen(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->characters_chosen(i), target);
  }

  // repeated int32 weapons_chosen = 17;
  for (int i = 0; i < this->weapons_chosen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->weapons_chosen(i), target);
  }

  // repeated int32 skills_chosen = 18;
  for (int i = 0; i < this->skills_chosen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->skills_chosen(i), target);
  }

  // repeated .da.protobuf.VoteResult votes = 19;
  for (int i = 0; i < this->votes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->votes(i), target);
  }

  // repeated string weapons_chosen_s = 20;
  for (int i = 0; i < this->weapons_chosen_s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapons_chosen_s(i).data(), this->weapons_chosen_s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->weapons_chosen_s(i), target);
  }

  // repeated string skills_chosen_s = 21;
  for (int i = 0; i < this->skills_chosen_s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skills_chosen_s(i).data(), this->skills_chosen_s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->skills_chosen_s(i), target);
  }

  // optional float map_time = 22;
  if (has_map_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->map_time(), target);
  }

  // optional int32 vr_active = 23;
  if (has_vr_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->vr_active(), target);
  }

  // optional int32 vr_inactive = 24;
  if (has_vr_inactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->vr_inactive(), target);
  }

  // optional int32 platform_windows = 25;
  if (has_platform_windows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->platform_windows(), target);
  }

  // optional int32 platform_linux = 26;
  if (has_platform_linux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->platform_linux(), target);
  }

  // optional int32 platform_osx = 27;
  if (has_platform_osx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->platform_osx(), target);
  }

  // repeated .da.protobuf.KillInfo kill_details = 28;
  for (int i = 0; i < this->kill_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->kill_details(i), target);
  }

  // repeated .da.protobuf.PlayerList player_list = 29;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool debug = 1;
    if (has_debug()) {
      total_size += 1 + 1;
    }

    // optional string map_name = 2;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string server_name = 3;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional .da.protobuf.PlayerPositions positions = 5;
    if (has_positions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positions());
    }

    // optional bool cheats = 6;
    if (has_cheats()) {
      total_size += 1 + 1;
    }

    // optional .da.protobuf.PlayerPositions kills = 7;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kills());
    }

    // optional .da.protobuf.PlayerPositions deaths = 8;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deaths());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 connections = 9;
    if (has_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connections());
    }

    // optional bool teamplay = 10;
    if (has_teamplay()) {
      total_size += 1 + 1;
    }

    // optional int32 thirdperson_active = 11;
    if (has_thirdperson_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thirdperson_active());
    }

    // optional int32 thirdperson_inactive = 12;
    if (has_thirdperson_inactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thirdperson_inactive());
    }

    // optional int32 disconnections = 13;
    if (has_disconnections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disconnections());
    }

    // optional int32 unique_players_this_map = 14;
    if (has_unique_players_this_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unique_players_this_map());
    }

    // optional int32 da_version = 15;
    if (has_da_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->da_version());
    }

  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    // optional float map_time = 22;
    if (has_map_time()) {
      total_size += 2 + 4;
    }

    // optional int32 vr_active = 23;
    if (has_vr_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vr_active());
    }

    // optional int32 vr_inactive = 24;
    if (has_vr_inactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vr_inactive());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 platform_windows = 25;
    if (has_platform_windows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_windows());
    }

    // optional int32 platform_linux = 26;
    if (has_platform_linux()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_linux());
    }

    // optional int32 platform_osx = 27;
    if (has_platform_osx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_osx());
    }

  }
  // repeated string characters_chosen = 16;
  total_size += 2 * this->characters_chosen_size();
  for (int i = 0; i < this->characters_chosen_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->characters_chosen(i));
  }

  // repeated int32 weapons_chosen = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->weapons_chosen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weapons_chosen(i));
    }
    total_size += 2 * this->weapons_chosen_size() + data_size;
  }

  // repeated int32 skills_chosen = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_chosen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skills_chosen(i));
    }
    total_size += 2 * this->skills_chosen_size() + data_size;
  }

  // repeated .da.protobuf.VoteResult votes = 19;
  total_size += 2 * this->votes_size();
  for (int i = 0; i < this->votes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->votes(i));
  }

  // repeated string weapons_chosen_s = 20;
  total_size += 2 * this->weapons_chosen_s_size();
  for (int i = 0; i < this->weapons_chosen_s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->weapons_chosen_s(i));
  }

  // repeated string skills_chosen_s = 21;
  total_size += 2 * this->skills_chosen_s_size();
  for (int i = 0; i < this->skills_chosen_s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->skills_chosen_s(i));
  }

  // repeated .da.protobuf.KillInfo kill_details = 28;
  total_size += 2 * this->kill_details_size();
  for (int i = 0; i < this->kill_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill_details(i));
  }

  // repeated .da.protobuf.PlayerList player_list = 29;
  total_size += 2 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  characters_chosen_.MergeFrom(from.characters_chosen_);
  weapons_chosen_.MergeFrom(from.weapons_chosen_);
  skills_chosen_.MergeFrom(from.skills_chosen_);
  votes_.MergeFrom(from.votes_);
  weapons_chosen_s_.MergeFrom(from.weapons_chosen_s_);
  skills_chosen_s_.MergeFrom(from.skills_chosen_s_);
  kill_details_.MergeFrom(from.kill_details_);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug()) {
      set_debug(from.debug());
    }
    if (from.has_map_name()) {
      set_map_name(from.map_name());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_positions()) {
      mutable_positions()->::da::protobuf::PlayerPositions::MergeFrom(from.positions());
    }
    if (from.has_cheats()) {
      set_cheats(from.cheats());
    }
    if (from.has_kills()) {
      mutable_kills()->::da::protobuf::PlayerPositions::MergeFrom(from.kills());
    }
    if (from.has_deaths()) {
      mutable_deaths()->::da::protobuf::PlayerPositions::MergeFrom(from.deaths());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connections()) {
      set_connections(from.connections());
    }
    if (from.has_teamplay()) {
      set_teamplay(from.teamplay());
    }
    if (from.has_thirdperson_active()) {
      set_thirdperson_active(from.thirdperson_active());
    }
    if (from.has_thirdperson_inactive()) {
      set_thirdperson_inactive(from.thirdperson_inactive());
    }
    if (from.has_disconnections()) {
      set_disconnections(from.disconnections());
    }
    if (from.has_unique_players_this_map()) {
      set_unique_players_this_map(from.unique_players_this_map());
    }
    if (from.has_da_version()) {
      set_da_version(from.da_version());
    }
  }
  if (from._has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    if (from.has_map_time()) {
      set_map_time(from.map_time());
    }
    if (from.has_vr_active()) {
      set_vr_active(from.vr_active());
    }
    if (from.has_vr_inactive()) {
      set_vr_inactive(from.vr_inactive());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_platform_windows()) {
      set_platform_windows(from.platform_windows());
    }
    if (from.has_platform_linux()) {
      set_platform_linux(from.platform_linux());
    }
    if (from.has_platform_osx()) {
      set_platform_osx(from.platform_osx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {

  if (has_positions()) {
    if (!this->positions().IsInitialized()) return false;
  }
  if (has_kills()) {
    if (!this->kills().IsInitialized()) return false;
  }
  if (has_deaths()) {
    if (!this->deaths().IsInitialized()) return false;
  }
  for (int i = 0; i < kill_details_size(); i++) {
    if (!this->kill_details(i).IsInitialized()) return false;
  }
  return true;
}

void GameData::Swap(GameData* other) {
  if (other != this) {
    std::swap(debug_, other->debug_);
    std::swap(map_name_, other->map_name_);
    std::swap(server_name_, other->server_name_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(positions_, other->positions_);
    std::swap(cheats_, other->cheats_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(connections_, other->connections_);
    std::swap(teamplay_, other->teamplay_);
    std::swap(thirdperson_active_, other->thirdperson_active_);
    std::swap(thirdperson_inactive_, other->thirdperson_inactive_);
    std::swap(disconnections_, other->disconnections_);
    std::swap(unique_players_this_map_, other->unique_players_this_map_);
    std::swap(da_version_, other->da_version_);
    characters_chosen_.Swap(&other->characters_chosen_);
    weapons_chosen_.Swap(&other->weapons_chosen_);
    skills_chosen_.Swap(&other->skills_chosen_);
    votes_.Swap(&other->votes_);
    weapons_chosen_s_.Swap(&other->weapons_chosen_s_);
    skills_chosen_s_.Swap(&other->skills_chosen_s_);
    std::swap(map_time_, other->map_time_);
    std::swap(vr_active_, other->vr_active_);
    std::swap(vr_inactive_, other->vr_inactive_);
    std::swap(platform_windows_, other->platform_windows_);
    std::swap(platform_linux_, other->platform_linux_);
    std::swap(platform_osx_, other->platform_osx_);
    kill_details_.Swap(&other->kill_details_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameData_descriptor_;
  metadata.reflection = GameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPositions::kPositionFieldNumber;
#endif  // !_MSC_VER

PlayerPositions::PlayerPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPositions::InitAsDefaultInstance() {
}

PlayerPositions::PlayerPositions(const PlayerPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPositions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPositions::~PlayerPositions() {
  SharedDtor();
}

void PlayerPositions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPositions_descriptor_;
}

const PlayerPositions& PlayerPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

PlayerPositions* PlayerPositions::default_instance_ = NULL;

PlayerPositions* PlayerPositions::New() const {
  return new PlayerPositions;
}

void PlayerPositions::Clear() {
  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .da.protobuf.Vector position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_position;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .da.protobuf.Vector position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .da.protobuf.Vector position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPositions::ByteSize() const {
  int total_size = 0;

  // repeated .da.protobuf.Vector position = 1;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPositions::MergeFrom(const PlayerPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPositions::CopyFrom(const PlayerPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPositions::IsInitialized() const {

  for (int i = 0; i < position_size(); i++) {
    if (!this->position(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerPositions::Swap(PlayerPositions* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPositions_descriptor_;
  metadata.reflection = PlayerPositions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteResult::kIssueFieldNumber;
const int VoteResult::kDetailsFieldNumber;
const int VoteResult::kResultFieldNumber;
#endif  // !_MSC_VER

VoteResult::VoteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VoteResult::InitAsDefaultInstance() {
}

VoteResult::VoteResult(const VoteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VoteResult::SharedCtor() {
  _cached_size_ = 0;
  issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteResult::~VoteResult() {
  SharedDtor();
}

void VoteResult::SharedDtor() {
  if (issue_ != &::google::protobuf::internal::kEmptyString) {
    delete issue_;
  }
  if (details_ != &::google::protobuf::internal::kEmptyString) {
    delete details_;
  }
  if (this != default_instance_) {
  }
}

void VoteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteResult_descriptor_;
}

const VoteResult& VoteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

VoteResult* VoteResult::default_instance_ = NULL;

VoteResult* VoteResult::New() const {
  return new VoteResult;
}

void VoteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_issue()) {
      if (issue_ != &::google::protobuf::internal::kEmptyString) {
        issue_->clear();
      }
    }
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::kEmptyString) {
        details_->clear();
      }
    }
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string issue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->issue().data(), this->issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // optional string details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details().data(), this->details().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VoteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string issue = 1;
  if (has_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issue().data(), this->issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->issue(), output);
  }

  // optional string details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details().data(), this->details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->details(), output);
  }

  // optional bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VoteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string issue = 1;
  if (has_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issue().data(), this->issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->issue(), target);
  }

  // optional string details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details().data(), this->details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->details(), target);
  }

  // optional bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VoteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string issue = 1;
    if (has_issue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issue());
    }

    // optional string details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details());
    }

    // optional bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteResult::MergeFrom(const VoteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issue()) {
      set_issue(from.issue());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResult::CopyFrom(const VoteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResult::IsInitialized() const {

  return true;
}

void VoteResult::Swap(VoteResult* other) {
  if (other != this) {
    std::swap(issue_, other->issue_);
    std::swap(details_, other->details_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteResult_descriptor_;
  metadata.reflection = VoteResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kPositionFieldNumber;
const int PlayerInfo::kHealthFieldNumber;
const int PlayerInfo::kFlagsFieldNumber;
const int PlayerInfo::kWeaponFieldNumber;
const int PlayerInfo::kSkillFieldNumber;
const int PlayerInfo::kAccountidFieldNumber;
const int PlayerInfo::kStyleFieldNumber;
const int PlayerInfo::kTotalStyleFieldNumber;
const int PlayerInfo::kKillsFieldNumber;
const int PlayerInfo::kDeathsFieldNumber;
const int PlayerInfo::kWaypointFieldNumber;
const int PlayerInfo::kObjectivePositionFieldNumber;
const int PlayerInfo::kSlowmoTypeFieldNumber;
const int PlayerInfo::kSlowmoSecondsFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  position_ = const_cast< ::da::protobuf::Vector*>(&::da::protobuf::Vector::default_instance());
  objective_position_ = const_cast< ::da::protobuf::Vector*>(&::da::protobuf::Vector::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  health_ = 0;
  flags_ = GOOGLE_ULONGLONG(0);
  weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0u;
  style_ = 0;
  total_style_ = 0;
  kills_ = 0u;
  deaths_ = 0u;
  waypoint_ = 0u;
  objective_position_ = NULL;
  slowmo_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slowmo_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (weapon_ != &::google::protobuf::internal::kEmptyString) {
    delete weapon_;
  }
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_;
  }
  if (slowmo_type_ != &::google::protobuf::internal::kEmptyString) {
    delete slowmo_type_;
  }
  if (this != default_instance_) {
    delete position_;
    delete objective_position_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::da::protobuf::Vector::Clear();
    }
    health_ = 0;
    flags_ = GOOGLE_ULONGLONG(0);
    if (has_weapon()) {
      if (weapon_ != &::google::protobuf::internal::kEmptyString) {
        weapon_->clear();
      }
    }
    if (has_skill()) {
      if (skill_ != &::google::protobuf::internal::kEmptyString) {
        skill_->clear();
      }
    }
    accountid_ = 0u;
    style_ = 0;
    total_style_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kills_ = 0u;
    deaths_ = 0u;
    waypoint_ = 0u;
    if (has_objective_position()) {
      if (objective_position_ != NULL) objective_position_->::da::protobuf::Vector::Clear();
    }
    if (has_slowmo_type()) {
      if (slowmo_type_ != &::google::protobuf::internal::kEmptyString) {
        slowmo_type_->clear();
      }
    }
    slowmo_seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .da.protobuf.Vector position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint64 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_weapon;
        break;
      }

      // optional string weapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weapon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weapon().data(), this->weapon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill;
        break;
      }

      // optional string skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill().data(), this->skill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_style;
        break;
      }

      // optional float style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_total_style;
        break;
      }

      // optional float total_style = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_total_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_style_)));
          set_has_total_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_waypoint;
        break;
      }

      // optional uint32 waypoint = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waypoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waypoint_)));
          set_has_waypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_objective_position;
        break;
      }

      // optional .da.protobuf.Vector objective_position = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objective_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objective_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_slowmo_type;
        break;
      }

      // optional string slowmo_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slowmo_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slowmo_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slowmo_type().data(), this->slowmo_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_slowmo_seconds;
        break;
      }

      // optional float slowmo_seconds = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_slowmo_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slowmo_seconds_)));
          set_has_slowmo_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .da.protobuf.Vector position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  // optional uint64 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flags(), output);
  }

  // optional string weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapon().data(), this->weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->weapon(), output);
  }

  // optional string skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->skill(), output);
  }

  // optional uint32 accountid = 6;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accountid(), output);
  }

  // optional float style = 7;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->style(), output);
  }

  // optional float total_style = 8;
  if (has_total_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->total_style(), output);
  }

  // optional uint32 kills = 9;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->kills(), output);
  }

  // optional uint32 deaths = 10;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->deaths(), output);
  }

  // optional uint32 waypoint = 11;
  if (has_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->waypoint(), output);
  }

  // optional .da.protobuf.Vector objective_position = 12;
  if (has_objective_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->objective_position(), output);
  }

  // optional string slowmo_type = 13;
  if (has_slowmo_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slowmo_type().data(), this->slowmo_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->slowmo_type(), output);
  }

  // optional float slowmo_seconds = 14;
  if (has_slowmo_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->slowmo_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .da.protobuf.Vector position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  // optional uint64 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flags(), target);
  }

  // optional string weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapon().data(), this->weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->weapon(), target);
  }

  // optional string skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->skill(), target);
  }

  // optional uint32 accountid = 6;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accountid(), target);
  }

  // optional float style = 7;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->style(), target);
  }

  // optional float total_style = 8;
  if (has_total_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->total_style(), target);
  }

  // optional uint32 kills = 9;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->kills(), target);
  }

  // optional uint32 deaths = 10;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->deaths(), target);
  }

  // optional uint32 waypoint = 11;
  if (has_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->waypoint(), target);
  }

  // optional .da.protobuf.Vector objective_position = 12;
  if (has_objective_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->objective_position(), target);
  }

  // optional string slowmo_type = 13;
  if (has_slowmo_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slowmo_type().data(), this->slowmo_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->slowmo_type(), target);
  }

  // optional float slowmo_seconds = 14;
  if (has_slowmo_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->slowmo_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .da.protobuf.Vector position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional uint64 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }

    // optional string weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weapon());
    }

    // optional string skill = 5;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill());
    }

    // optional uint32 accountid = 6;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional float style = 7;
    if (has_style()) {
      total_size += 1 + 4;
    }

    // optional float total_style = 8;
    if (has_total_style()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 kills = 9;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 10;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 waypoint = 11;
    if (has_waypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waypoint());
    }

    // optional .da.protobuf.Vector objective_position = 12;
    if (has_objective_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objective_position());
    }

    // optional string slowmo_type = 13;
    if (has_slowmo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slowmo_type());
    }

    // optional float slowmo_seconds = 14;
    if (has_slowmo_seconds()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::da::protobuf::Vector::MergeFrom(from.position());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_total_style()) {
      set_total_style(from.total_style());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_waypoint()) {
      set_waypoint(from.waypoint());
    }
    if (from.has_objective_position()) {
      mutable_objective_position()->::da::protobuf::Vector::MergeFrom(from.objective_position());
    }
    if (from.has_slowmo_type()) {
      set_slowmo_type(from.slowmo_type());
    }
    if (from.has_slowmo_seconds()) {
      set_slowmo_seconds(from.slowmo_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_objective_position()) {
    if (!this->objective_position().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(health_, other->health_);
    std::swap(flags_, other->flags_);
    std::swap(weapon_, other->weapon_);
    std::swap(skill_, other->skill_);
    std::swap(accountid_, other->accountid_);
    std::swap(style_, other->style_);
    std::swap(total_style_, other->total_style_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(waypoint_, other->waypoint_);
    std::swap(objective_position_, other->objective_position_);
    std::swap(slowmo_type_, other->slowmo_type_);
    std::swap(slowmo_seconds_, other->slowmo_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillInfo::kVictimFieldNumber;
const int KillInfo::kKillerFieldNumber;
const int KillInfo::kGrenadePositionFieldNumber;
#endif  // !_MSC_VER

KillInfo::KillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillInfo::InitAsDefaultInstance() {
  victim_ = const_cast< ::da::protobuf::PlayerInfo*>(&::da::protobuf::PlayerInfo::default_instance());
  killer_ = const_cast< ::da::protobuf::PlayerInfo*>(&::da::protobuf::PlayerInfo::default_instance());
  grenade_position_ = const_cast< ::da::protobuf::Vector*>(&::da::protobuf::Vector::default_instance());
}

KillInfo::KillInfo(const KillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillInfo::SharedCtor() {
  _cached_size_ = 0;
  victim_ = NULL;
  killer_ = NULL;
  grenade_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillInfo::~KillInfo() {
  SharedDtor();
}

void KillInfo::SharedDtor() {
  if (this != default_instance_) {
    delete victim_;
    delete killer_;
    delete grenade_position_;
  }
}

void KillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillInfo_descriptor_;
}

const KillInfo& KillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

KillInfo* KillInfo::default_instance_ = NULL;

KillInfo* KillInfo::New() const {
  return new KillInfo;
}

void KillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_victim()) {
      if (victim_ != NULL) victim_->::da::protobuf::PlayerInfo::Clear();
    }
    if (has_killer()) {
      if (killer_ != NULL) killer_->::da::protobuf::PlayerInfo::Clear();
    }
    if (has_grenade_position()) {
      if (grenade_position_ != NULL) grenade_position_->::da::protobuf::Vector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .da.protobuf.PlayerInfo victim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_victim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_killer;
        break;
      }

      // optional .da.protobuf.PlayerInfo killer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_grenade_position;
        break;
      }

      // optional .da.protobuf.Vector grenade_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grenade_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grenade_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .da.protobuf.PlayerInfo victim = 1;
  if (has_victim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->victim(), output);
  }

  // optional .da.protobuf.PlayerInfo killer = 2;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->killer(), output);
  }

  // optional .da.protobuf.Vector grenade_position = 3;
  if (has_grenade_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grenade_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .da.protobuf.PlayerInfo victim = 1;
  if (has_victim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->victim(), target);
  }

  // optional .da.protobuf.PlayerInfo killer = 2;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->killer(), target);
  }

  // optional .da.protobuf.Vector grenade_position = 3;
  if (has_grenade_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grenade_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .da.protobuf.PlayerInfo victim = 1;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->victim());
    }

    // optional .da.protobuf.PlayerInfo killer = 2;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killer());
    }

    // optional .da.protobuf.Vector grenade_position = 3;
    if (has_grenade_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grenade_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillInfo::MergeFrom(const KillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victim()) {
      mutable_victim()->::da::protobuf::PlayerInfo::MergeFrom(from.victim());
    }
    if (from.has_killer()) {
      mutable_killer()->::da::protobuf::PlayerInfo::MergeFrom(from.killer());
    }
    if (from.has_grenade_position()) {
      mutable_grenade_position()->::da::protobuf::Vector::MergeFrom(from.grenade_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillInfo::CopyFrom(const KillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillInfo::IsInitialized() const {

  if (has_victim()) {
    if (!this->victim().IsInitialized()) return false;
  }
  if (has_killer()) {
    if (!this->killer().IsInitialized()) return false;
  }
  if (has_grenade_position()) {
    if (!this->grenade_position().IsInitialized()) return false;
  }
  return true;
}

void KillInfo::Swap(KillInfo* other) {
  if (other != this) {
    std::swap(victim_, other->victim_);
    std::swap(killer_, other->killer_);
    std::swap(grenade_position_, other->grenade_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillInfo_descriptor_;
  metadata.reflection = KillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerList::kAccountidFieldNumber;
const int PlayerList::kNameFieldNumber;
const int PlayerList::kStyleFieldNumber;
#endif  // !_MSC_VER

PlayerList::PlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerList::InitAsDefaultInstance() {
}

PlayerList::PlayerList(const PlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerList::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerList::~PlayerList() {
  SharedDtor();
}

void PlayerList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerList_descriptor_;
}

const PlayerList& PlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

PlayerList* PlayerList::default_instance_ = NULL;

PlayerList* PlayerList::New() const {
  return new PlayerList;
}

void PlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    style_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_style;
        break;
      }

      // optional float style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accountid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional float style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->accountid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float style = 3;
    if (has_style()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerList::MergeFrom(const PlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerList::CopyFrom(const PlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerList::IsInitialized() const {

  return true;
}

void PlayerList::Swap(PlayerList* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(name_, other->name_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerList_descriptor_;
  metadata.reflection = PlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerReply::kDailyLeaderFieldNumber;
const int ServerReply::kDailyLeaderStyleFieldNumber;
const int ServerReply::kWeeklyLeaderFieldNumber;
const int ServerReply::kWeeklyLeaderStyleFieldNumber;
const int ServerReply::kMonthlyLeaderFieldNumber;
const int ServerReply::kMonthlyLeaderStyleFieldNumber;
#endif  // !_MSC_VER

ServerReply::ServerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerReply::InitAsDefaultInstance() {
}

ServerReply::ServerReply(const ServerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerReply::SharedCtor() {
  _cached_size_ = 0;
  daily_leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  daily_leader_style_ = 0;
  weekly_leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekly_leader_style_ = 0;
  monthly_leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monthly_leader_style_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerReply::~ServerReply() {
  SharedDtor();
}

void ServerReply::SharedDtor() {
  if (daily_leader_ != &::google::protobuf::internal::kEmptyString) {
    delete daily_leader_;
  }
  if (weekly_leader_ != &::google::protobuf::internal::kEmptyString) {
    delete weekly_leader_;
  }
  if (monthly_leader_ != &::google::protobuf::internal::kEmptyString) {
    delete monthly_leader_;
  }
  if (this != default_instance_) {
  }
}

void ServerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerReply_descriptor_;
}

const ServerReply& ServerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

ServerReply* ServerReply::default_instance_ = NULL;

ServerReply* ServerReply::New() const {
  return new ServerReply;
}

void ServerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_daily_leader()) {
      if (daily_leader_ != &::google::protobuf::internal::kEmptyString) {
        daily_leader_->clear();
      }
    }
    daily_leader_style_ = 0;
    if (has_weekly_leader()) {
      if (weekly_leader_ != &::google::protobuf::internal::kEmptyString) {
        weekly_leader_->clear();
      }
    }
    weekly_leader_style_ = 0;
    if (has_monthly_leader()) {
      if (monthly_leader_ != &::google::protobuf::internal::kEmptyString) {
        monthly_leader_->clear();
      }
    }
    monthly_leader_style_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string daily_leader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daily_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->daily_leader().data(), this->daily_leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_daily_leader_style;
        break;
      }

      // optional float daily_leader_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_daily_leader_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &daily_leader_style_)));
          set_has_daily_leader_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weekly_leader;
        break;
      }

      // optional string weekly_leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekly_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekly_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekly_leader().data(), this->weekly_leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_weekly_leader_style;
        break;
      }

      // optional float weekly_leader_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weekly_leader_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weekly_leader_style_)));
          set_has_weekly_leader_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_monthly_leader;
        break;
      }

      // optional string monthly_leader = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monthly_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monthly_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monthly_leader().data(), this->monthly_leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_monthly_leader_style;
        break;
      }

      // optional float monthly_leader_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_monthly_leader_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &monthly_leader_style_)));
          set_has_monthly_leader_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string daily_leader = 1;
  if (has_daily_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daily_leader().data(), this->daily_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->daily_leader(), output);
  }

  // optional float daily_leader_style = 2;
  if (has_daily_leader_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->daily_leader_style(), output);
  }

  // optional string weekly_leader = 3;
  if (has_weekly_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekly_leader().data(), this->weekly_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weekly_leader(), output);
  }

  // optional float weekly_leader_style = 4;
  if (has_weekly_leader_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->weekly_leader_style(), output);
  }

  // optional string monthly_leader = 5;
  if (has_monthly_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monthly_leader().data(), this->monthly_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->monthly_leader(), output);
  }

  // optional float monthly_leader_style = 6;
  if (has_monthly_leader_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->monthly_leader_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string daily_leader = 1;
  if (has_daily_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daily_leader().data(), this->daily_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->daily_leader(), target);
  }

  // optional float daily_leader_style = 2;
  if (has_daily_leader_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->daily_leader_style(), target);
  }

  // optional string weekly_leader = 3;
  if (has_weekly_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekly_leader().data(), this->weekly_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weekly_leader(), target);
  }

  // optional float weekly_leader_style = 4;
  if (has_weekly_leader_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->weekly_leader_style(), target);
  }

  // optional string monthly_leader = 5;
  if (has_monthly_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monthly_leader().data(), this->monthly_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->monthly_leader(), target);
  }

  // optional float monthly_leader_style = 6;
  if (has_monthly_leader_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->monthly_leader_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string daily_leader = 1;
    if (has_daily_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daily_leader());
    }

    // optional float daily_leader_style = 2;
    if (has_daily_leader_style()) {
      total_size += 1 + 4;
    }

    // optional string weekly_leader = 3;
    if (has_weekly_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekly_leader());
    }

    // optional float weekly_leader_style = 4;
    if (has_weekly_leader_style()) {
      total_size += 1 + 4;
    }

    // optional string monthly_leader = 5;
    if (has_monthly_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monthly_leader());
    }

    // optional float monthly_leader_style = 6;
    if (has_monthly_leader_style()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerReply::MergeFrom(const ServerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily_leader()) {
      set_daily_leader(from.daily_leader());
    }
    if (from.has_daily_leader_style()) {
      set_daily_leader_style(from.daily_leader_style());
    }
    if (from.has_weekly_leader()) {
      set_weekly_leader(from.weekly_leader());
    }
    if (from.has_weekly_leader_style()) {
      set_weekly_leader_style(from.weekly_leader_style());
    }
    if (from.has_monthly_leader()) {
      set_monthly_leader(from.monthly_leader());
    }
    if (from.has_monthly_leader_style()) {
      set_monthly_leader_style(from.monthly_leader_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerReply::CopyFrom(const ServerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReply::IsInitialized() const {

  return true;
}

void ServerReply::Swap(ServerReply* other) {
  if (other != this) {
    std::swap(daily_leader_, other->daily_leader_);
    std::swap(daily_leader_style_, other->daily_leader_style_);
    std::swap(weekly_leader_, other->weekly_leader_);
    std::swap(weekly_leader_style_, other->weekly_leader_style_);
    std::swap(monthly_leader_, other->monthly_leader_);
    std::swap(monthly_leader_style_, other->monthly_leader_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerReply_descriptor_;
  metadata.reflection = ServerReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace da

// @@protoc_insertion_point(global_scope)
